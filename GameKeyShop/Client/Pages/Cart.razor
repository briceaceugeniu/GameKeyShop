@page "/cart"
@inject ICartService CartService
@inject IOrderService OrderService

<PageTitle>Shopping Cart</PageTitle>

<h3>Shopping Cart</h3>

@if (cartProducts == null || cartProducts.Count == 0)
{
    <span>@message</span>
}
else if (orderPlaced)
{
    <div class="alert alert-success" role="alert">
        Great! Your order have been placed!
        <br />
        Please check out your <a href="orders">orders</a> page.    
    </div>
}
else
{
    <div>
        @foreach (var product in cartProducts)
        {
            <div class="container">
                <div class="image-wrapper">
                    <img src="@product.ImageUrl" class="image" />
                </div>
                <div class="name">
                    <h5><a href="/product/@product.ProductId">@product.Title</a></h5>
                    <span>@product.PlatformType</span><br />
                    <input type="number" value="@product.Quantity"
                           @onchange="@((ChangeEventArgs e) => UpdateQuantity(e, product))"
                           class="form-control input-quantity"
                           min="1" />
                    <button class="btn-delete" @onclick="@(() =>
                        RemoveProductFromCart(product.ProductId, product.PlatformTypeId))">
                        Delete
                    </button>
                </div>
                <div class="cart-product-price">€ @(product.Price * product.Quantity)</div>
            </div>
        }
        <div class="cart-product-price">
            Total (@cartProducts.Count): € @cartProducts.Sum(product => @product.Price * product.Quantity)
        </div>
    </div>
    @*<button @onclick="PlaceOrder" class="btn btn-success float-end mt-3">Place order</button>*@
    <a class="btn btn-outline-primary float-end mt-3" href="cart/payment">Go to Payment</a>
}

@code {
    List<CartProductResponseDto> cartProducts = null;
    private string message = "Loading cart...";
    private bool orderPlaced = false;

    protected override async Task OnInitializedAsync()
    {
        orderPlaced = false;
        await LoadCart();
    }

    private async Task RemoveProductFromCart(int prodId, int platformTypeId)
    {
        await CartService.RemoveProductFromCart(prodId, platformTypeId);
        await LoadCart();
    }

    private async Task LoadCart()
    {
        await CartService.GetCartItemsCount();
        cartProducts = await CartService.GetCartProducts();

        if (cartProducts == null || cartProducts.Count == 0)
        {
            message = "Your cart is empty";
            cartProducts = new List<CartProductResponseDto>();
        }
    }

    private async Task UpdateQuantity(ChangeEventArgs e, CartProductResponseDto product)
    {
        product.Quantity = int.Parse(e.Value.ToString());
        if (product.Quantity < 1)
            product.Quantity = 1;
        await CartService.UpdateQuantity(product);
    }

    private async Task PlaceOrder()
    {
        await OrderService.PlaceOrder();
        await CartService.GetCartItemsCount();
        orderPlaced = true;
    }
}
