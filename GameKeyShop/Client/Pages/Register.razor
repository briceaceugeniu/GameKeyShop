@page "/register"
@inject IAuthService AuthService

<PageTitle>Registration</PageTitle>

<h3>Registration</h3>

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @_errorMessage
    </div>
}
@if (!string.IsNullOrEmpty(_successMessage))
{
    <div class="alert alert-success" role="alert">
        @_successMessage
    </div>
}


<EditForm Model="_user" OnValidSubmit="HandleRegistration">
    <DataAnnotationsValidator />
    <div>
    <div class="input-group mb-3">
      <div>
        <span class="input-group-text">Email</span>
      </div>
      <InputText id="email" class="form-control" @bind-Value="_user.Email" />
    </div>
    <ValidationMessage For="@(() => _user.Email)" />
  </div>
  <div>
    <div class="input-group mb-3">
      <div>
        <span class="input-group-text">Password</span>
      </div>
      <InputText id="password" type="@_passwordType" class="form-control" @bind-Value="_user.Password" />
      <div>
        <button type="button" class="btn btn-secondary" @onclick="TogglePasswordVisibility">
          <i class="oi oi-eye"></i>
        </button>
      </div>
    </div>
    <ValidationMessage For="@(() => _user.Password)" />
  </div>
  <div>
    <div class="input-group mb-3">
      <div>
        <span class="input-group-text">Confirm Password</span>
      </div>
      <InputText id="confirmPassword" type="@_confirmPasswordType" class="form-control" @bind-Value="_user.ConfirmPassword" />
      <div>
        <button type="button" class="btn btn-secondary" @onclick="ToggleConfirmationPasswordVisibility">
          <i class="oi oi-eye"></i>
        </button>
      </div>
    </div>
    <ValidationMessage For="@(() => _user.ConfirmPassword)" />
  </div>
  <button type="submit" class="btn btn-primary mt-3">Register</button>
</EditForm>

@code {
    readonly UserRegister _user = new UserRegister();

    private bool _showPassword;
    private bool _showConfirmationPassword;
    private string _passwordType = "password";
    private string _confirmPasswordType = "password";

    string _errorMessage = string.Empty;
    string _successMessage = string.Empty;

    private void TogglePasswordVisibility()
    {
        _showPassword = !_showPassword;
        _passwordType = _showPassword ? "text" : "password";
    }

    private void ToggleConfirmationPasswordVisibility()
    {
        _showConfirmationPassword = !_showConfirmationPassword;
        _confirmPasswordType = _showConfirmationPassword ? "text" : "password";
    }

    async Task HandleRegistration()
    {
        var result = await AuthService.Register(_user);

        if (!result.Success)
        {
            _errorMessage = result.Message;
            _successMessage = string.Empty;

        }
        else
        {
            _successMessage = result.Message;
            _errorMessage = string.Empty;
            _user.Email = string.Empty;
            _user.Password = string.Empty;
            _user.ConfirmPassword = string.Empty;
        }
    }
}
