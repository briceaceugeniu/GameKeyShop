@page "/register"
@inject IAuthService AuthService

<PageTitle>Registration</PageTitle>

<h3>Registration</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}
@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success" role="alert">
        @successMessage
    </div>
}


<EditForm Model="user" OnValidSubmit="HandleRegistration">
    <DataAnnotationsValidator />
    <div class="form-group">
    <div class="input-group mb-3">
      <div class="input-group-prepend">
        <span class="input-group-text">Email</span>
      </div>
      <InputText id="email" class="form-control" @bind-Value="user.Email" />
    </div>
    <ValidationMessage For="@(() => user.Email)" />
  </div>
  <div class="form-group">
    <div class="input-group mb-3">
      <div class="input-group-prepend">
        <span class="input-group-text">Password</span>
      </div>
      <InputText id="password" type="@passwordType" class="form-control" @bind-Value="user.Password" />
      <div class="input-group-append">
        <button type="button" class="btn btn-secondary" @onclick="TogglePasswordVisibility">
          <i class="oi oi-eye"></i>
        </button>
      </div>
    </div>
    <ValidationMessage For="@(() => user.Password)" />
  </div>
  <div class="form-group">
    <div class="input-group mb-3">
      <div class="input-group-prepend">
        <span class="input-group-text">Confirm Password</span>
      </div>
      <InputText id="confirmPassword" type="@confirmPasswordType" class="form-control" @bind-Value="user.ConfirmPassword" />
      <div class="input-group-append">
        <button type="button" class="btn btn-secondary" @onclick="ToggleConfirmationPasswordVisibility">
          <i class="oi oi-eye"></i>
        </button>
      </div>
    </div>
    <ValidationMessage For="@(() => user.ConfirmPassword)" />
  </div>
  <button type="submit" class="btn btn-primary mt-3">Register</button>
</EditForm>

@code {
    UserRegister user = new UserRegister();

    private bool showPassword = false;
    private bool showConfirmationPassword = false;
    private string passwordType = "password";
    private string confirmPasswordType = "password";

    string errorMessage = string.Empty;
    string successMessage = string.Empty;

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
        passwordType = showPassword ? "text" : "password";
    }

    private void ToggleConfirmationPasswordVisibility()
    {
        showConfirmationPassword = !showConfirmationPassword;
        confirmPasswordType = showConfirmationPassword ? "text" : "password";
    }

    async Task HandleRegistration()
    {
        var result = await AuthService.Register(user);

        if (!result.Success)
        {
            errorMessage = result.Message;
            successMessage = string.Empty;

        }
        else
        {
            successMessage = result.Message;
            errorMessage = string.Empty;
            user.Email = string.Empty;
            user.Password = string.Empty;
            user.ConfirmPassword = string.Empty;
        }
    }
}
