@page "/login"
@using Microsoft.AspNetCore.WebUtilities;
@inject IAuthService AuthService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ICartService CartService

<PageTitle>Login</PageTitle>

<h3>Login</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

<EditForm Model="user" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <div class="form-group">
    <div class="input-group mb-3">
      <div class="input-group-prepend">
        <span class="input-group-text">Email</span>
      </div>
      <InputText id="email" class="form-control" @bind-Value="user.Email" />
    </div>
    <ValidationMessage For="@(() => user.Email)" />
  </div>
  <div class="form-group">
    <div class="input-group mb-3">
      <div class="input-group-prepend">
        <span class="input-group-text">Password</span>
      </div>
      <InputText id="password" type="@passwordType" class="form-control" @bind-Value="user.Password" />
      <div class="input-group-append">
        <button type="button" class="btn btn-secondary" @onclick="TogglePasswordVisibility">
          <i class="oi oi-eye"></i>
        </button>
      </div>
    </div>
    <ValidationMessage For="@(() => user.Password)" />
  </div>
  <button type="submit" class="btn btn-primary mt-3">Login</button>
</EditForm>

@code {
    private UserLogin user = new UserLogin();

    private bool showPassword = false;
    private string passwordType = "password";

    private string errorMessage = string.Empty;

    private string returnUrl = string.Empty;

    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var url))
        {
            returnUrl = url;
        }
    }

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
        passwordType = showPassword ? "text" : "password";
    }

    private async Task HandleLogin()
    {
        var result = await AuthService.Login(user);

        if (!result.Success)
        {
            errorMessage = result.Message;
        }
        else
        {
            errorMessage = string.Empty;
            await LocalStorage.SetItemAsync("authToken", result.Data);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            await CartService.StoreCartItems(true);
            await CartService.GetCartItemsCount();
            NavigationManager.NavigateTo(returnUrl);
        }
    }
}
