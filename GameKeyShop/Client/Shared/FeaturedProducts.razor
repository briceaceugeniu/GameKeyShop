@inject IProductService ProductService
@implements IDisposable

<div style="text-align: center;" ><h2>Top Games</h2></div>
@if (ProductService.Products.Count == 0)
{
    <span>@ProductService.Message</span>
}
else
{
    <div class="container">
        @foreach (var product in ProductService.Products)
        {
            @if (product.Featured)
            {
                <div class="card m-1" style="width: 18rem;">
                    <a href="product/@product.Id">
                        @if (!string.IsNullOrEmpty(product.ImageUrl))
                        {
                            <img class="card-img-top" src="@product.ImageUrl" alt="Game image cover">
                        }
                    </a>
                    <div class="card-body">
                        <h5 class="card-title"><a href="product/@product.Id">@product.Name</a></h5>
                        <p class="card-text"></p>
                        @if (product.Variants.Count > 0)
                        {
                            <div class="card-footer price">
                                € @product.Variants[0].Price
                            </div>
                        }
                    </div>
                </div>
            }
        }
    </div>
}

@code {
    protected override void OnInitialized()
    {
        ProductService.ProductsChanged += StateHasChanged;
    }

    public void Dispose()
    {
        ProductService.ProductsChanged -= StateHasChanged;
    }
}